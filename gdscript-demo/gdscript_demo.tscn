[gd_scene load_steps=5 format=2]

[ext_resource path="res://gdscript-demo/viewer.gdshader" type="Shader" id=1]
[ext_resource path="res://HelpPanel.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=6]
script/source = "extends Control

onready var config:Config=get_node(\"/root/Config\")

var Settings=preload(\"res://Settings.tscn\")

class NoiseObject:
	var seed_nr:int
	var octaves:int
	var period:float
	var initial_period:float
	var persistence:float
	var lacunarity:float
	
	func _init(seed_nr:int,octaves:int,period:float,persistence:float,lacunarity:float):
		self.seed_nr=seed_nr
		self.octaves=octaves
		self.period=period
		self.initial_period=period
		self.persistence=persistence
		self.lacunarity=lacunarity

class AreaInfoObject:
	var biome:float
	var heat:float
	var moisture:float
	var altitude:float
	var color:Color
	
	func _init(biome:float,heat:float,moisture:float,altitude:float,color:Array):
		self.biome=biome 
		self.heat=heat
		self.moisture=moisture
		self.altitude=altitude
		self.color=Color(color[0],color[1],color[2])

var mainElevationTex:OpenSimplexNoise
var elevationTex:OpenSimplexNoise
var moistureTex:OpenSimplexNoise
var heatTex:OpenSimplexNoise
var colormap:OpenSimplexNoise

var mainElevationNoise:NoiseObject
var elevationNoise:NoiseObject
var moistureNoise:NoiseObject
var heatNoise:NoiseObject

var biome_gen:BiomeGenerator=BiomeGenerator.new()

var zoom:float=1.0/8 setget set_zoom, get_zoom
var world_offset:Vector2=Vector2()
var camera_size:Vector2=Vector2(64,64)

var mode:int=0 # 0=idle 1=active 2=input delay 3=passive
var active_timeout:float=0
var resolution_idx=0
var resolutions=[16.0,12.0,8.0,6.0,4.0,2.0,1.0]

var current_map_texture:ImageTexture

var current_map_array

var current_area_info:AreaInfoObject

var worker_cancel_task:bool=false
var thread:Thread

var benchmark_timer=0

var current_seed:int=0

var paused:bool=false
var settings_panel=null

# Called when the node enters the scene tree for the first time.
func _ready():
	init_all_textures()
	update_position()

func init_all_textures():
	
	self.moistureNoise=NoiseObject.new(1,4,8,3,0.4)
	self.moistureTex=init_texture(self.moistureNoise)
	
	self.heatNoise=NoiseObject.new(2,4,8,3,0.4)
	self.heatTex=init_texture(self.heatNoise)
	
	self.mainElevationNoise=NoiseObject.new(0,9,360,1,1)
	self.mainElevationTex=init_texture(self.mainElevationNoise)
	
	self.elevationNoise=NoiseObject.new(0,6,60,0.5,3.1)
	self.elevationTex=init_texture(self.elevationNoise)
	
func init_texture(noiseObj:NoiseObject):
	var noise=OpenSimplexNoise.new()
	noise.seed=noiseObj.seed_nr
	noise.octaves=noiseObj.octaves
	noise.period=noiseObj.period
	noise.persistence=noiseObj.persistence
	noise.lacunarity=noiseObj.lacunarity
	
	return noise

func getBiomeColor(idx:float):
	if idx==0:
		return [0,0,0.5]
	elif idx==0.1:
		return [25/255.0,25/255.0,150/255.0]
	elif idx==0.2:
		return [240/255.0,240/255.0,64/255.0]
	elif idx==0.25:
		return [238/255.0,218/255.0,130/255.0]
	elif idx==0.3:
		return [50/255.0,220/255.0,20/255.0]
	elif idx==0.35:
		return [177/255.0,209/255.0,110/255.0]
	elif idx==0.4:
		return [16/255.0,160/255.0, 0]
	elif idx==0.45:
		return [73/255.0,100/255.0, 35/255.0]
	elif idx==0.5:
		return [95/255.0,115/255.0, 62/255.0]
	elif idx==0.55:
		return [29/255.0,73/255.0, 40/255.0]
	elif idx==0.6:
		return [0.5,0.5,0.5]
	elif idx==0.65:
		return [96/255.0,131/255.0,112/255.0]
	else:
		return [1.0,1.0,1.0]

func getBiomeName(idx:float):
	if idx==0:
		return \"Deep Water\"
	elif idx==0.1:
		return \"Shallow Water\"
	elif idx==0.2:
		return \"Sand\"
	elif idx==0.25:
		return \"Desert\"
	elif idx==0.3:
		return \"Grass\"
	elif idx==0.35:
		return \"Savanna\"
	elif idx==0.4:
		return \"Forest\"
	elif idx==0.45:
		return \"Seasonal Forest\"
	elif idx==0.5:
		return \"Boreal Forest\"
	elif idx==0.55:
		return \"Rain Forest\"
	elif idx==0.6:
		return \"Rock\"
	elif idx==0.65:
		return \"Tundra\"
	else:
		return \"Ice\"


func createColorMap() -> GradientTexture:
	
	var gradient=Gradient.new()
	gradient.set_color(0, Color(0,0,0.5))  # deep water
	gradient.add_point(0.1, Color(25/255.0,25/255.0,150/255.0))  # shallow water
	gradient.add_point(0.2, Color(240/255.0,240/255.0,64/255.0))  # sand
	gradient.add_point(0.25, Color(238/255.0,218/255.0,130/255.0))  # desert
	gradient.add_point(0.3, Color(50/255.0,220/255.0,20/255.0))  # grass
	gradient.add_point(0.35, Color(177/255.0,209/255.0,110/255.0))  # savanna
	gradient.add_point(0.4, Color(16/255.0,160/255.0, 0))  # forest
	gradient.add_point(0.45, Color(73/255.0,100/255.0, 35/255.0))  # seasonal forest
	gradient.add_point(0.5, Color(95/255.0,115/255.0, 62/255.0))  # boreal forest
	gradient.add_point(0.55, Color(29/255.0,73/255.0, 40/255.0))  # rainforest
	gradient.add_point(0.6, Color(0.5,0.5,0.5))  # rock
	gradient.add_point(0.65, Color(96/255.0,131/255.0,112/255.0))  # tundra
	gradient.add_point(0.7, Color(1,1,1))  # snow
	
	var colorMap=GradientTexture.new()
	colorMap.width=64
	colorMap.gradient=gradient
	colorMap.flags=4
	return colorMap

func update_labels():
	$sidebar/OctaveLabel.text=\"Octave : \"+str(elevationNoise.octaves)
	$sidebar/ZoomLabel.text=\"Zoom : \"+str(zoom)
	
	$sidebar/XLabel.text=\"X : \"+str(world_offset.x/zoom)
	$sidebar/YLabel.text=\"Y : \"+str(world_offset.y/zoom)
	$sidebar/WorldXLabel.text=\"World X : \"+str(world_offset.x)
	$sidebar/WorldYLabel.text=\"World Y : \"+str(world_offset.y)
	
	$sidebar/HeatLabel.text=\"Temperature : \"+str(get_current_temperature())+\" Â°C\"
	$sidebar/MoistureLabel.text=\"Humidity : \"+str(get_current_humidity())+\"%\"
	$sidebar/BiomeLabel.text=\"Biome : \"+get_current_biome()
	$sidebar/AltitudeLabel.text=\"Altitude : \"+str(get_current_altitude())+\" m\"

func get_camera_position():
	return (world_offset*zoom)*resolutions[resolution_idx]

func get_noise_offset():
	return (world_offset*zoom-camera_size/2)*resolutions[resolution_idx]
	

func set_zoom(new_value:float):
	zoom=new_value

func get_zoom():
	return zoom

func get_noise_value(n:OpenSimplexNoise,x:int,y:int):
	return (1.0+n.get_noise_2d(x, y))/2.0

func get_elevation_image_line(is_cancellable,y,noise_y,line_size,camera_zoomed_size):
	
	var line_data:=[]
	
	for x in range(line_size):
		if worker_cancel_task and is_cancellable:
			return
		
		var noise_x=x+get_noise_offset().x
		
		var main_height :float= get_noise_value(mainElevationTex,noise_x,noise_y)
		var height :float= get_noise_value(elevationTex,noise_x,noise_y)
		var elevation:=( min(pow(height,2)+height,1) + 2.0 * main_height*main_height ) / 3.0
		
		var heat:float=get_noise_value(heatTex,noise_x,noise_y)
		var moisture:float=get_noise_value(moistureTex,noise_x,noise_y)
		
		var biome_idx:float=biome_gen.get_biome(elevation,heat,moisture)
		
		var biome_color=getBiomeColor(biome_idx)
		
		line_data.push_back(biome_color[0])
		line_data.push_back(biome_color[1])
		line_data.push_back(biome_color[2])
		
		if(x==camera_zoomed_size.x/2 and y==camera_zoomed_size.y/2):
			current_area_info=AreaInfoObject.new(biome_idx,heat,moisture,elevation,biome_color)
	
	current_map_array[y]=line_data

func get_elevation_image_line1(params):
	get_elevation_image_line(params[0],params[1],params[2],params[3],params[4])

func get_elevation_image(is_cancellable:bool):
	var out := ImageTexture.new()

	var camera_zoomed_size=camera_size*resolutions[resolution_idx]

	current_map_array=[]
	current_map_array.resize(camera_zoomed_size.y)

	var max_thread_count=6
	
	var threads=[]

	for y in range(camera_zoomed_size.y):
		if is_cancellable and worker_cancel_task:
			return
		
		var noise_y=y+get_noise_offset().y
		var t=Thread.new()
		threads.append(t)
		t.start(self,\"get_elevation_image_line1\",[is_cancellable,y,noise_y,camera_zoomed_size.x,camera_zoomed_size])
#		get_elevation_image_line(is_cancellable,y,noise_y,camera_zoomed_size.x,camera_zoomed_size)
		
		if threads.size()>=max_thread_count:
			for thread in threads:
				thread.wait_to_finish()
			threads=[]
	
	if threads.size()>0:
		for t in threads:
			t.wait_to_finish()
		threads=[]
	
	var bytes = StreamPeerBuffer.new()
	
	for y in range(camera_zoomed_size.y):
		for d in current_map_array[y]:
			bytes.put_float(d)
	
	var image := Image.new()
	image.create_from_data(camera_zoomed_size.x, camera_zoomed_size.y, false, Image.FORMAT_RGBF, bytes.data_array)
	out.create_from_image(image, 5)
	
	return out

func update_map():
	var tex=get_elevation_image(false)
	current_map_texture=tex
	$ColorRect.get_material().set_shader_param(\"BIOME_MAP\",current_map_texture)


func update_noise(noiseObj:NoiseObject,noiseTex:OpenSimplexNoise):
	noiseObj.period=noiseObj.initial_period*zoom*resolutions[resolution_idx]
	noiseTex.period=noiseObj.period

func update_zoom_noise():
	update_noise(elevationNoise,elevationTex)
	update_noise(mainElevationNoise,mainElevationTex)
	update_noise(moistureNoise,moistureTex)
	update_noise(heatNoise,heatTex)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if paused:
		return
	
	var image_updated=false
	var speed=20*delta
	
	var movement=Vector2()
	if Input.is_action_pressed(\"ui_left\"):
		movement.x+=-speed
	if Input.is_action_pressed(\"ui_right\"):
		movement.x+=speed
	if Input.is_action_pressed(\"ui_up\"):
		movement.y+=-speed
	if Input.is_action_pressed(\"ui_down\"):
		movement.y+=speed

	if movement.length()>0:
		world_offset+=movement/zoom
		update_position()
		image_updated=true

	if Input.is_action_just_pressed(\"octave_plus\"):
		elevationNoise.octaves+=1
		elevationTex.octaves=elevationNoise.octaves
		update_position()
	if Input.is_action_just_pressed(\"octave_minus\"):
		elevationNoise.octaves-=1
		elevationTex.octaves=elevationNoise.octaves
		update_position()
	if Input.is_action_just_pressed(\"lacunarity_plus\"):
		elevationNoise.lacunarity+=0.1
		elevationTex.lacunarity=elevationNoise.lacunarity
	if Input.is_action_just_pressed(\"lacunarity_minus\"):
		elevationNoise.lacunarity-=0.1
		elevationTex.lacunarity=elevationNoise.lacunarity
	if Input.is_action_pressed(\"periode_plus\"):
		if zoom>20:
			zoom+=1
		elif zoom>2:
			zoom+=0.1
		elif zoom>0.2:
			zoom+=0.01
		else:
			zoom+=0.001
		update_position()
		image_updated=true
	if Input.is_action_pressed(\"periode_minus\"):
		if zoom>20:
			zoom-=1
		elif zoom>2:
			zoom-=0.1
		elif zoom>0.2:
			zoom-=0.01
		else:
			zoom-=0.001
		update_position()
		image_updated=true
	
	if Input.is_action_just_pressed(\"period_small\"):
		zoom=0.1
		elevationNoise.octaves=6
		elevationTex.octaves=elevationNoise.octaves
		update_position()
		image_updated=true
	if Input.is_action_just_pressed(\"period_normal\"):
		zoom=1
		elevationNoise.octaves=6
		elevationTex.octaves=elevationNoise.octaves
		update_position()
		image_updated=true
	if Input.is_action_just_pressed(\"period_large\"):
		zoom=10
		elevationNoise.octaves=9
		elevationTex.octaves=elevationNoise.octaves
		update_position()
		image_updated=true
	if Input.is_action_just_pressed(\"period_extralarge\"):
		zoom=100
		elevationNoise.octaves=9
		elevationTex.octaves=elevationNoise.octaves
		update_position()
		image_updated=true
	
	if Input.is_action_just_pressed(\"toggle_help\"):
		$Help.visible=not $Help.visible
	
	if Input.is_action_just_pressed(\"toggle_settings\"):
		paused=true
		config.current_coord=world_offset
		settings_panel=Settings.instance()
		add_child(settings_panel)
		settings_panel.connect(\"applied\", self, \"on_settings_applied\")
		settings_panel.connect(\"cancelled\", self, \"on_settings_cancelled\")
	
	if not image_updated and mode==1:
		mode=2
		active_timeout=0.2
	elif mode==2:
		if thread!=null and thread.is_alive():
			worker_cancel_task=true
		else:
			active_timeout-=delta
			if active_timeout<0:
				mode=3
				start_thread()

func start_thread():
	thread=Thread.new()
	thread.start(self,\"progressive_run\")
	

func cancel_thread():
	if thread!=null and thread.is_alive():
		worker_cancel_task=true
		print(\"wait_to_finish\")
		thread.wait_to_finish()
		print(\"done\")
#		thread=null

func initial_run():
	cancel_thread()
	resolution_idx=resolutions.size()-1
	worker_cancel_task=false
	update_zoom_noise()
	update_map()

func progressive_run():
	if mode==3:
		if resolution_idx>0:
			resolution_idx-=1
		else:
			mode=0
	if mode==3:
		update_zoom_noise()
		var tex=get_elevation_image(true)
		if not worker_cancel_task:
			self.call_deferred(\"refresh_image\",tex)
			if resolution_idx==0:
				print(\"total time : \"+str(OS.get_ticks_msec()-benchmark_timer)+\"ms\")
	

func update_position():
	benchmark_timer=OS.get_ticks_msec()
	mode=1
	initial_run()
	update_labels()

func refresh_image(new_texture:ImageTexture):
	print(\"refresh zoom \"+str(resolutions[resolution_idx])+\"x\")
	$ColorRect.get_material().set_shader_param(\"BIOME_MAP\",new_texture)
	start_thread()

func get_current_temperature():
	if current_area_info!=null:
		return round(((current_area_info.heat-0.5)*100+10)*10)/10.0
	else:
		return 0.0

func get_current_humidity():
	if current_area_info!=null:
		return round(current_area_info.moisture*100)
	else:
		return 0.0

func get_current_altitude():
	if current_area_info!=null:
		return round(current_area_info.altitude*8000)-4000
	else:
		return 0.0


func get_current_biome():
	if current_area_info!=null:
		var biome_idx:float=current_area_info.biome
		return getBiomeName(biome_idx)
	else:
		return \"-- Null --\"

func set_seed(seed_nr):
	current_seed=seed_nr
	elevationNoise.seed_nr=current_seed
	elevationTex.seed=elevationNoise.seed_nr
	mainElevationNoise.seed_nr=current_seed
	mainElevationTex.seed=mainElevationNoise.seed_nr
	moistureNoise.seed_nr=current_seed+1
	moistureTex.seed=moistureNoise.seed_nr
	heatNoise.seed_nr=current_seed+2
	heatTex.seed=heatNoise.seed_nr
	

func on_settings_applied():
	paused=false
	if settings_panel!=null:
		remove_child(settings_panel)
		settings_panel=null
	set_seed(config.current_seed)
	world_offset=config.current_coord
	update_position()

func on_settings_cancelled():
	paused=false
	if settings_panel!=null:
		remove_child(settings_panel)
		settings_panel=null

func _exit_tree():
	cancel_thread()
"

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 1 )

[node name="Main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 6 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -162.0

[node name="sidebar" type="VBoxContainer" parent="."]
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -150.0
margin_top = 14.0

[node name="HelpLabel" type="Label" parent="sidebar"]
margin_right = 150.0
margin_bottom = 31.0
text = "Press H for help
"

[node name="OctaveLabel" type="Label" parent="sidebar"]
margin_top = 35.0
margin_right = 150.0
margin_bottom = 49.0
text = "Octave : 4"

[node name="ZoomLabel" type="Label" parent="sidebar"]
margin_top = 53.0
margin_right = 150.0
margin_bottom = 67.0
text = "Zoom : 1"

[node name="XLabel" type="Label" parent="sidebar"]
margin_top = 71.0
margin_right = 150.0
margin_bottom = 85.0
text = "X : 0"

[node name="YLabel" type="Label" parent="sidebar"]
margin_top = 89.0
margin_right = 150.0
margin_bottom = 103.0
text = "Y : 0"

[node name="WorldXLabel" type="Label" parent="sidebar"]
margin_top = 107.0
margin_right = 150.0
margin_bottom = 121.0
text = "World X : 0"

[node name="WorldYLabel" type="Label" parent="sidebar"]
margin_top = 125.0
margin_right = 150.0
margin_bottom = 139.0
text = "World Y : 0"

[node name="AltitudeLabel" type="Label" parent="sidebar"]
margin_top = 143.0
margin_right = 150.0
margin_bottom = 157.0
text = "Altitude : 0"

[node name="HeatLabel" type="Label" parent="sidebar"]
margin_top = 161.0
margin_right = 150.0
margin_bottom = 175.0
text = "Temperature : 0"

[node name="MoistureLabel" type="Label" parent="sidebar"]
margin_top = 179.0
margin_right = 150.0
margin_bottom = 193.0
text = "Humidity : 0"

[node name="BiomeLabel" type="Label" parent="sidebar"]
margin_top = 197.0
margin_right = 150.0
margin_bottom = 211.0
text = "Biome :"

[node name="PictureBiome" type="ColorRect" parent="sidebar"]
margin_top = 215.0
margin_right = 150.0
margin_bottom = 215.0

[node name="Help" parent="." instance=ExtResource( 2 )]
visible = false
modulate = Color( 1, 1, 1, 0.784314 )
